package bitManipulation;

public class FindXORValue {
    static void findXorValue(int n) {
        // Rules: xor of 0^N = N, N^N=0
        // finding xor of numbers from 1 to N
        // 1 -> 01, 2- > 10, 3 -> 11, 4 -> 100, 5 -> 101, 6 -> 110, 7 -> 111, 8 -> 1000, 9 -> 1001, 10 -> 1010,
        // 11 -> 1011, 12 -> 1100, 13 -> 1101, 14 -> 1110, 15 -> 1111
        // 1.  1 = 1(01)
        // 2.  1 ^ 2 = 3 (11),
        // 3.  1 ^ 2 ^ 3 = 3 ^ 3 = 0(00),
        // 4.  1 ^ 2 ^ 3 ^ 4 -> 0 ^ 4 -> 4(100),
        // 5.  1 ^ 2 ^ 3 ^ 4 ^ 5 -> 4 ^ 5 -> 1 (01)
        // 6.  1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 -> 1 ^ 6 -> 7 (111)
        // 7.  1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 -> 7 ^ 7 -> 0 (00)
        // 8.  1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 -> 0 ^ 8 -> 8 (1000)
        // 9.  1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 -> 8 ^ 9 -> 1(01)
        // 10. 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 -> 1 ^ 10 -> 11(1011)
        // 11. 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 -> 11 ^ 11 -> 0 (01)
        // 12. 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 -> 0 ^ 12 -> 12(1100)
        // if N = multiple of 4 -> xor(N) -> N;
        // if N % 4 = 1, xor(N) = 1;
        // if N % 4 = 2, xor(N) = N + 1;
        // if N % 4 = 3, xor(N) = 0;
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            ans = ans ^ i;
        }
        System.out.println(ans);
    }

    public static void main(String[] args) {
        int n = 10;
        findXorValue(n);
    }
}
